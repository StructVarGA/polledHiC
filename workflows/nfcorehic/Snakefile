
import os
import pandas as pd


def run_params(protocol):
    ''' Set the nfcorehic params for the given protocol'''
    params = {
            'fasta': config['ref']['genome'],
            'bwt2_index':  config['ref']['genome'],
            'chromosome_size': config['ref']['chromosome_size'],
            'restriction_site': config['hicpro'][protocol]['restriction_site'],
            'ligation_site': config['hicpro'][protocol]['ligation_site'],
            'bin_size': config['hicpro']['bin_size']
        }
    return params


def get_readdir(wildcards):
    return units.loc[(wildcards.sample, wildcards.protocol)]['fastqdir']


def get_outdir(wildcards):
    return os.path.realpath(f'{wildcards.sample}/{wildcards.protocol}')


configfile: "config.yaml"

units = pd.read_table(config["units"], dtype=str).set_index(["sample", "protocol"],
                                                            drop=False)

nfcore_hic_config = os.path.realpath("nfcore-hic.config")

workdir: config['sample']


rule all:
    input:
        expand("{unit.sample}/{unit.protocol}/cleanedwork.done",
               unit=units.itertuples())

rule nfconfig:
    output:
        "{sample}/{protocol}/run.config"
    run:
        with open(output[0], "w") as out:
            params = run_params(wildcards.protocol)
            config_str = "\nparams { \n\n"
            for key, value in params.items():
                config_str += "   %s = \'%s\'\n" % (key, value)
            config_str += "\n}\n"
            out.write(config_str)


rule nfcorehic:
    input:
        "{sample}/{protocol}/run.config"
    output:
        "{sample}/{protocol}/nfcorehic.done"
    params:
        outdir = get_outdir,
        readdir = get_readdir,
        nfcore_hic_config = nfcore_hic_config,
        runid = lambda w: w.sample + "-" + w.protocol
    shell:
        """
        cd {params.outdir}
        module purge
        module load bioinfo/nfcore-Nextflow-v19.04.0
        nextflow run nf-core/hic \
          -revision 1.1.0 \
          -profile genotoul \
          -resume \
          -name {params.runid} \
          -c {params.nfcore_hic_config} \
          -c 'run.config' \
          --outdir {params.outdir} \
          --work-dir {params.outdir} \
          --reads '{params.readdir}/*_R{{1,2}}.fastq.gz'
          touch nfcorehic.done
        """

rule cleanwork:
    input:
        "{sample}/{protocol}/nfcorehic.done"
    output:
        touch("{sample}/{protocol}/cleanedwork.done")
    params:
        rundir = lambda w: w.sample + "/" + w.protocol
    shell:
        "rm -fr {params.rundir}/work"
