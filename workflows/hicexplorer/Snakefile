
import os
import glob
import re
import pandas as pd


def set_run_names(protocols):
    ''' For each protocol retrieve the associated run names '''
    runs = []
    for protocol in protocols.index:
        matrix_dir = protocols.loc[protocol]['matrixdir']
        prot_runs = []
        for f in glob.glob(matrix_dir+'/*.matrix'):
            prot_runs.append(re.sub('_\d+.matrix', '', os.path.basename(f),))
        runs.append(",".join(set(prot_runs)))
    protocols['runs'] = runs
    return protocols


def get_raw_matrix(wildcards):
    """ input function for rule conversion
        returns the hicpro raw matrix associated to a protocol-run-resolution
    """
    mdir = protocols.loc[wildcards.protocol]['matrixdir']
    matrix_file = wildcards.run + "_" + wildcards.resolution + ".matrix"
    return mdir + "/" + matrix_file


def get_bed_file(wildcards):
    """ input function for rule conversion
        returns the hicpro bed file associated to a protocol-run-resolution
    """
    mdir = protocols.loc[wildcards.protocol]['matrixdir']
    bed_file = wildcards.run + "_" + wildcards.resolution + "_abs.bed"
    return mdir + "/" + bed_file


def get_matrices(wildcards):
    """ input function for rule mergeprotocol
        returns list of the h5 matrices associated with a protocol-resolution
    """
    runs = protocols.loc[wildcards.protocol]['runs'].split(',')
    matrices = []
    for run in runs:
        m = run + "_" + wildcards.resolution + ".h5"
        m_path = os.path.join("hdf5", wildcards.protocol, m)
        matrices.append(m_path)
    return matrices


configfile: "config.yaml"

protocols = pd.read_csv(config["protocols"], sep="\t").set_index("protocol",
                                                                 drop=False)

protocols = set_run_names(protocols)
chromosomes = config['chromosomes']

workdir: config['sample']

protocols_and_merged = list(protocols.index) + ["merged"]

wildcard_constraints:
    protocols="|".join(protocols_and_merged)

rule all:
    input:
        expand("{protocol}/1000000/corrected_diagnostic.png", protocol=protocols.index)


rule conversion:
    input:
        raw = get_raw_matrix,
        bed = get_bed_file
    output:
        "hdf5/{protocol}/{run}_{resolution}.h5"
    shell:
        "hicConvertFormat --matrices {input.raw} --bedFileHicpro {input.bed}"
        " --outFileName {output} --outputFormat h5 --inputFormat hicpro"

rule mergeprotocol:
    input:
        get_matrices
    output:
        "{protocol}/{resolution}/matrix.h5"
    shell:
        "hicSumMatrices --matrices  {input} --outFileName {output}"

rule merge:
    input:
        expand("{protocol}/{{resolution}}/matrix.h5", protocol=protocols.index)
    output:
        "merged/{resolution}/matrix.h5"
    shell:
        "hicSumMatrices --matrices  {input} --outFileName {output}"

rule adjust:
    input:
        "{protocol}/{resolution}/matrix.h5"
    output:
        "{protocol}/{resolution}/adjusted.h5"
    params:
        chromosomes = chromosomes
    shell:
        "hicAdjustMatrix --matrix {input} --outFileName {output} "
        " --chromosomes {params.chromosomes} --action keep"

rule normalize:
    input:
        "{protocol}/{resolution}/adjusted.h5"
    output:
        "{protocol}/{resolution}/normalized.h5"
    shell:
        "hicNormalize --matrices {input} --outFileName {output}"
        " --normalize smallest"

rule diagnostic:
    input:
        "{protocol}/{resolution}/{type}.h5"
    output:
        "{protocol}/{resolution}/{type}_diagnostic.png"
    shell:
        "hicCorrectMatrix diagnostic_plot -m {input} -o {output}"

rule correct:
    input:
        "{protocol}/{resolution}/normalized.h5"
    output:
        "{protocol}/{resolution}/corrected.h5"
    shell:
        "hicCorrectMatrix correct --matrix {input} --outFileName {output}"
